{"version":3,"sources":["components/Input.module.css","components/Display.module.css","components/SettingPage.module.css","components/WorkPage.module.css","reportWebVitals.ts","store/store.ts","store/startValue-reducer.ts","store/maxValue-reducer.ts","components/InputComponent.tsx","components/ButtonComponent.tsx","components/SettingPage.tsx","components/Display.tsx","components/WorkPage.tsx","AppWithRedux.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","startValue","state","action","type","Number","value","maxValue","store","createStore","InputComponent","props","classesStartInput","classes","error","normal","classesMaxInput","TextField","id","label","variant","className","size","margin","onChange","changeMaxValue","changeStartValue","ButtonComponent","Button","color","onClick","callBack","disabled","disabledButton","title","SettingPage","button","updateSettings","disabledSet","Display","redDisplay","redStyle","maxValueDisplay","displayValue","WorkPage","workPage","displayValuePlus","disabledMode","resetDisplayValue","disabledReset","AppWithRedux","dispatch","useDispatch","useSelector","useState","setDisplayValue","disabledInc","setDisabledInc","setDisabledReset","setDisabledSet","setRedStyle","Paper","style","padding","Container","fixed","e","currentTarget","changeMaxValueAC","changeStartValueAC","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af205a40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__1TTfY\",\"normal\":\"Input_normal__1erlu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"maxValueDisplay\":\"Display_maxValueDisplay__Kck2v\",\"normal\":\"Display_normal__z9Him\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SettingPage_button__1Nmu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"workPage\":\"WorkPage_workPage__1BdNV\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {startValueReducer} from \"./startValue-reducer\";\r\nimport {maxValueReducer} from \"./maxValue-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    startValue: startValueReducer,\r\n    maxValue: maxValueReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)","import {ChangeEvent} from \"react\";\r\n\r\n\r\nlet initialState: number = 1\r\n\r\nexport const startValueReducer = (state = initialState, action: ActionType): number => {\r\n    switch (action.type) {\r\n        case 'CHANGE-START-VALUE': {\r\n            // let copyState: number = ...state\r\n            state = Number(action.value)\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const changeStartValueAC = (e: ChangeEvent<HTMLInputElement>): changeStartValueACReturnType => {\r\n    return {\r\n        type: 'CHANGE-START-VALUE',\r\n        value: e.currentTarget.value\r\n    }\r\n}\r\n\r\ntype changeStartValueACReturnType = {\r\n    type: string\r\n    value: string\r\n}\r\n\r\n\r\ntype ActionType = changeStartValueACReturnType","import {ChangeEvent} from \"react\";\r\n\r\n\r\nlet initialState: number = 5\r\n\r\nexport const maxValueReducer = (state = initialState, action: ActionType): number => {\r\n    switch (action.type) {\r\n        case 'CHANGE-MAX-VALUE': {\r\n            // let copyState: number = ...state\r\n            state = Number(action.value)\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const changeMaxValueAC = (e: ChangeEvent<HTMLInputElement>): changeMaxValueACReturnType => {\r\n    return {\r\n        type: 'CHANGE-MAX-VALUE',\r\n        value: e.currentTarget.value\r\n    }\r\n}\r\n\r\ntype changeMaxValueACReturnType = {\r\n    type: string\r\n    value: string\r\n}\r\n\r\n\r\ntype ActionType = changeMaxValueACReturnType","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent} from 'react';\r\nimport classes from './Input.module.css';\r\n\r\ntype InputPropsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    changeMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changeStartValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\nexport const InputComponent = (props: InputPropsType) => {\r\n\r\n    let classesStartInput = props.startValue >= props.maxValue || props.startValue < 0 ? classes.error : classes.normal\r\n    let classesMaxInput = props.startValue >= props.maxValue || props.maxValue < 0 ? classes.error : classes.normal\r\n\r\n    return (\r\n        <div>\r\n            <TextField id=\"outlined-basic\" label=\"MAX Value\" variant=\"outlined\"\r\n                       className={classesMaxInput}\r\n                       type={'number'}\r\n                       size={'small'}\r\n                       margin={'normal'}\r\n\r\n                       value={props.maxValue}\r\n                       onChange={props.changeMaxValue}\r\n\r\n            />\r\n\r\n            {/*Max value: <input className={classesMaxInput}*/}\r\n            {/*                  type={'number'}*/}\r\n            {/*                  value={props.maxValue}*/}\r\n            {/*                  onChange={props.changeMaxValue}/>*/}\r\n\r\n            {/*Start value: <input className={classesStartInput}*/}\r\n            {/*                    type={'number'}*/}\r\n            {/*                    value={props.startValue}*/}\r\n            {/*                    onChange={props.changeStartValue}/>*/}\r\n            <TextField id=\"outlined-basic\" label=\"START Value\" variant=\"outlined\"\r\n                       className={classesStartInput}\r\n                       type={'number'}\r\n                       size={'small'}\r\n                       margin={'normal'}\r\n                       value={props.startValue}\r\n                       onChange={props.changeStartValue}\r\n\r\n            />\r\n\r\n        </div>\r\n    )\r\n}","import {Button} from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ntype ButtonProps = {\r\n    title: string\r\n    callBack: () => void\r\n    disabledButton?: boolean\r\n}\r\nexport const ButtonComponent = (props: ButtonProps) => {\r\n\r\n    const callBack = () => {\r\n        props.callBack()\r\n    }\r\n    return (\r\n        <Button\r\n            color={\"secondary\"}\r\n            variant={\"outlined\"}\r\n            onClick={callBack}\r\n            disabled={props.disabledButton}>{props.title}</Button>\r\n        //  <button onClick={callBack} disabled={props.disabledButton}>{props.title}</button>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {InputComponent} from \"./InputComponent\";\r\nimport {ButtonComponent} from \"./ButtonComponent\";\r\nimport classes from './SettingPage.module.css'\r\n\r\ntype SettingPageProps = {\r\n    maxValue: number\r\n    startValue: number\r\n    changeMaxValue: (e: ChangeEvent<HTMLInputElement>)=> void\r\n    changeStartValue: (e: ChangeEvent<HTMLInputElement>)=> void\r\n    updateSettings: () => void\r\n    disabledSet: boolean\r\n}\r\n\r\nexport const SettingPage = (props: SettingPageProps) => {\r\n    return (\r\n        <div>\r\n        <InputComponent maxValue={props.maxValue}\r\n                        startValue={props.startValue}\r\n                        changeMaxValue={props.changeMaxValue}\r\n                        changeStartValue={props.changeStartValue}/>\r\n            <div className={classes.button}>\r\n                <ButtonComponent title={'SET'} callBack={props.updateSettings} disabledButton={props.disabledSet}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {displayValueType} from \"../App\";\r\nimport classes from './Display.module.css'\r\n\r\ntype DisplayProps = {\r\n    displayValue: displayValueType\r\n    maxValue: number\r\n    redStyle: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayProps) => {\r\n\r\n    const redDisplay = props.redStyle ? classes.maxValueDisplay : classes.normal\r\n    return(\r\n        <div className={redDisplay}>\r\n            {props.displayValue}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {ButtonComponent} from \"./ButtonComponent\";\r\nimport {displayValueType} from \"../App\";\r\nimport {Display} from \"./Display\";\r\nimport classes from './WorkPage.module.css'\r\n\r\ntype WorkPageProps = {\r\n    displayValue: displayValueType\r\n    resetDisplayValue: () => void\r\n    displayValuePlus: () => void\r\n    maxValue: number\r\n    disabledMode: boolean\r\n    redStyle: boolean\r\n    disabledReset: boolean\r\n}\r\n\r\nexport const WorkPage = (props: WorkPageProps) => {\r\n    return (\r\n        <div className={classes.workPage}>\r\n            <Display displayValue={props.displayValue} maxValue={props.maxValue} redStyle={props.redStyle}/>\r\n            <ButtonComponent title={'inc'} callBack={props.displayValuePlus} disabledButton={props.disabledMode}/>\r\n            <ButtonComponent title={'reset'} callBack={props.resetDisplayValue} disabledButton={props.disabledReset}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {SettingPage} from \"./components/SettingPage\";\r\nimport {WorkPage} from \"./components/WorkPage\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store/store\";\r\nimport {changeStartValueAC} from \"./store/startValue-reducer\";\r\nimport {changeMaxValueAC} from \"./store/maxValue-reducer\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nexport type displayValueType = 'Set Settings' | 'Error' | number\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch()\r\n    let startValue = useSelector<AppRootState, number>(state => state.startValue)\r\n    let maxValue = useSelector<AppRootState, number>(state => state.maxValue)\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeMaxValueAC(e))\r\n        // setMaxValue(Number(e.currentTarget.value))\r\n        setDisplayValue('Set Settings')\r\n        setDisabledInc(true)\r\n        setDisabledReset(true)\r\n        setDisabledSet(false)\r\n        setRedStyle(false)\r\n    }\r\n\r\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeStartValueAC(e))\r\n        setDisplayValue('Set Settings')\r\n        setDisabledInc(true)\r\n        setDisabledReset(true)\r\n        setDisabledSet(false)\r\n        setRedStyle(false)\r\n    }\r\n\r\n    let [displayValue, setDisplayValue] = useState<displayValueType>(startValue)\r\n\r\n    let [disabledInc, setDisabledInc] = useState(false)\r\n    let [disabledReset, setDisabledReset] = useState(false)\r\n    let [disabledSet, setDisabledSet] = useState(true)\r\n\r\n    const resetDisplayValue = () => {\r\n        setDisplayValue(startValue)\r\n        setDisabledInc(false)\r\n        setRedStyle(false)\r\n    }\r\n\r\n    let [redStyle, setRedStyle] = useState(false)\r\n\r\n    const displayValuePlus = () => {\r\n        if (displayValue === maxValue) {\r\n            setDisabledInc(true)\r\n            setRedStyle(true)\r\n        } else if (displayValue !== 'Set Settings' || 'Error') {\r\n            setDisplayValue(Number(displayValue) + 1)\r\n        } else {\r\n            setDisplayValue(displayValue)\r\n        }\r\n        // Если displayValue: number то тогда setDisplayValue(displayValue +1)\r\n    }\r\n\r\n\r\n    // // for localStorage\r\n    // useEffect(() => {\r\n    //     let localMaxValue = localStorage.getItem('maxValue')\r\n    //     if (localMaxValue) {\r\n    //         // let maxValueMem = JSON.parse(localMaxValue)\r\n    //         setMaxValue(JSON.parse(localMaxValue))\r\n    //     }\r\n    // }, [])\r\n    //\r\n    // useEffect(() => {\r\n    //     localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n    // }, [maxValue])\r\n    //\r\n    //\r\n    // useEffect(()=> {\r\n    //     let localStartValue = localStorage.getItem('startValue')\r\n    //     if (localStartValue) {\r\n    //         setStartValue(JSON.parse(localStartValue))\r\n    //     }\r\n    // }, [])\r\n\r\n    // useEffect(()=> {\r\n    //   localStorage.setItem('startValue', JSON.stringify(startValue))\r\n    // }, [startValue])\r\n\r\n\r\n    const updateSettings = () => {\r\n        if (startValue < 0) {\r\n            setDisplayValue('Error')\r\n        } else if (startValue >= maxValue) {\r\n            setDisplayValue('Error')\r\n        } else {\r\n            setDisplayValue(startValue)\r\n            setDisabledInc(false)\r\n            setDisabledReset(false)\r\n            setRedStyle(false)\r\n            setDisabledSet(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        // <div className=\"App\">\r\n//\r\n//     <Container fixed>\r\n//         <Grid container style={{padding: '20px'}}>\r\n//             <AddItemForm addItem={addTodolist}/>\r\n//         </Grid>\r\n//         <Grid container spacing={3}>\r\n//             {\r\n//                 todolists.map(tl => {\r\n//                     let allTodolistTasks = tasks[tl.id];\r\n//\r\n//                     return <Grid item key={tl.id}>\r\n//                         <Paper style={{padding: '10px'}}>\r\n//                             <Todolist\r\n//                                 id={tl.id}\r\n//                                 title={tl.title}\r\n//                                 tasks={allTodolistTasks}\r\n//                                 removeTask={removeTask}\r\n//                                 changeFilter={changeFilter}\r\n//                                 addTask={addTask}\r\n//                                 changeTaskStatus={changeStatus}\r\n//                                 filter={tl.filter}\r\n//                                 removeTodolist={removeTodolist}\r\n//                                 changeTaskTitle={changeTaskTitle}\r\n//                                 changeTodolistTitle={changeTodolistTitle}\r\n//                             />\r\n//                         </Paper>\r\n//                     </Grid>\r\n//                 })\r\n//             }\r\n//         </Grid>\r\n//     </Container>\r\n// </div>\r\n\r\n        <div className=\"App\">\r\n            <Paper style={{padding: '10px'}}>\r\n            <Container fixed>\r\n\r\n                    <SettingPage\r\n                        maxValue={maxValue}\r\n                        changeMaxValue={changeMaxValue}\r\n                        startValue={startValue}\r\n                        changeStartValue={changeStartValue}\r\n                        updateSettings={updateSettings}\r\n                        disabledSet={disabledSet}\r\n                    />\r\n\r\n                    <WorkPage displayValue={displayValue}\r\n                              resetDisplayValue={resetDisplayValue}\r\n                              displayValuePlus={displayValuePlus}\r\n                              maxValue={maxValue}\r\n                              disabledMode={disabledInc}\r\n                              redStyle={redStyle}\r\n                              disabledReset={disabledReset}\r\n                    />\r\n\r\n            </Container>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>,\r\ndocument.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}